/*!
 * bs Swiper
 * 
 * @version 6.0.0
 */


/**
 * Multiple Swiper instances per page 
 * See https://raddy.co.uk/blog/multiple-instances-of-swiperjs-on-the-same-page-with-the-same-settings/
 */


/**
 * Column Slider
 */
document.addEventListener('DOMContentLoaded', function () {
  const bsSwiper = document.querySelectorAll('.bs-swiper-columns');

  for (let i = 0; i < bsSwiper.length; i++) {
    const el = bsSwiper[i];
    const uniqueClass = 'bs-swiper-columns-' + i;
    el.classList.add(uniqueClass);

    let breakpoints = {
      slidesPerView: 1,
      576: { slidesPerView: 1 },
      768: { slidesPerView: 2 },
      992: { slidesPerView: 3 },
      1200: { slidesPerView: 4 },
      1400: { slidesPerView: 4 },
    };

    const bpData = el.getAttribute('data-swiper-breakpoints');
    if (bpData) {
      try {
        breakpoints = JSON.parse(bpData);
      } catch (e) {
        console.warn('Invalid Swiper breakpoints JSON:', bpData);
      }
    }

    // Get settings from data attributes
    const loopData = el.getAttribute('data-swiper-loop');
    const loop = loopData === 'true';

    const autoplayData = el.getAttribute('data-swiper-autoplay');
    const autoplayEnabled = autoplayData === 'true';
    
    const delayData = el.getAttribute('data-swiper-delay');
    const delay = delayData ? parseInt(delayData) : 4000;

    const spaceBetweenData = el.getAttribute('data-swiper-spacebetween');
    const spaceBetween = spaceBetweenData ? parseInt(spaceBetweenData) : 20;

    const effectData = el.getAttribute('data-swiper-effect');
    const effect = effectData || 'slide';

    const speedData = el.getAttribute('data-swiper-speed');
    const speed = speedData ? parseInt(speedData) : 300;

    // Get navigation setting
    const navigationData = el.getAttribute('data-swiper-navigation');
    const navigationEnabled = navigationData !== 'false';

    // Configure autoplay
    let autoplayConfig = false;
    if (autoplayEnabled) {
      autoplayConfig = {
        delay: delay,
        pauseOnMouseEnter: true,
        disableOnInteraction: false,
      };
    }

    // Configure navigation - SCOPE TO THIS INSTANCE
    let navigationConfig = false;
    if (navigationEnabled) {
      // Find navigation elements WITHIN this specific swiper
      const nextButton = el.querySelector('.swiper-button-next');
      const prevButton = el.querySelector('.swiper-button-prev');
      
      if (nextButton && prevButton) {
        navigationConfig = {
          nextEl: nextButton,  // Use actual DOM element, not CSS selector
          prevEl: prevButton,  // Use actual DOM element, not CSS selector
        };
      }
    }

    // Configure effect-specific settings
    let effectConfig = {};
    switch (effect) {
      case 'fade':
        effectConfig = { fadeEffect: { crossFade: true } };
        break;
      case 'cube':
        effectConfig = { cubeEffect: { shadow: true, slideShadows: true, shadowOffset: 20, shadowScale: 0.94 } };
        break;
      case 'coverflow':
        effectConfig = { coverflowEffect: { rotate: 50, stretch: 0, depth: 100, modifier: 1, slideShadows: true } };
        break;
      case 'flip':
        effectConfig = { flipEffect: { slideShadows: true, limitRotation: true } };
        break;
      case 'cards':
        effectConfig = { cardsEffect: { slideShadows: false } };
        break;
      case 'creative':
        effectConfig = { creativeEffect: { prev: { translate: [0, 0, -400] }, next: { translate: ['100%', 0, 0] } } };
        break;
    }

    // Also scope pagination to this instance
    const paginationEl = el.querySelector('.swiper-pagination');

    new Swiper('.' + uniqueClass, {
      slidesPerView: 1,
      spaceBetween: spaceBetween,
      loop: loop,
      grabCursor: true,
      autoplay: autoplayConfig,
      effect: effect,
      speed: speed,
      ...effectConfig,
      pagination: {
        el: paginationEl,  // Use scoped pagination element
        clickable: true,
      },
      navigation: navigationConfig, // Use scoped navigation config
      breakpoints: breakpoints
    });
  }
});