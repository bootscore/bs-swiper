/*!
 * bs Swiper
 * 
 * @version 6.0.0
 */


/**
 * Multiple Swiper instances per page 
 * See https://raddy.co.uk/blog/multiple-instances-of-swiperjs-on-the-same-page-with-the-same-settings/
 */


/**
 * Column Slider
 */
document.addEventListener('DOMContentLoaded', function () {
  const bsSwiper = document.querySelectorAll('.bs-swiper-columns');

  for (let i = 0; i < bsSwiper.length; i++) {
    const el = bsSwiper[i];
    el.classList.add('bs-swiper-columns-' + i);

    let breakpoints = {
      slidesPerView: 1,           // xs
      576: { slidesPerView: 1 },  // sm
      768: { slidesPerView: 2 },  // md
      992: { slidesPerView: 3 },  // lg
      1200: { slidesPerView: 4 }, // xl
      1400: { slidesPerView: 4 }, // 2xl (xxl will be renamed into 2xl in Bootstrap 6)
    };

    const bpData = el.getAttribute('data-swiper-breakpoints');
    if (bpData) {
      try {
        breakpoints = JSON.parse(bpData);
      } catch (e) {
        console.warn('Invalid Swiper breakpoints JSON:', bpData);
      }
    }

    // Get loop setting from data attribute, default to false
    const loopData = el.getAttribute('data-swiper-loop');
    const loop = loopData === 'true';

    // Get autoplay settings from data attributes
    const autoplayData = el.getAttribute('data-swiper-autoplay');
    const autoplayEnabled = autoplayData === 'true';
    
    const delayData = el.getAttribute('data-swiper-delay');
    const delay = delayData ? parseInt(delayData) : 4000;

    // Get spacebetween setting from data attribute, default to 20
    const spaceBetweenData = el.getAttribute('data-swiper-spacebetween');
    const spaceBetween = spaceBetweenData ? parseInt(spaceBetweenData) : 20;

    // Get effect setting from data attribute, default to 'slide'
    const effectData = el.getAttribute('data-swiper-effect');
    const effect = effectData || 'slide';

    // Get speed setting from data attribute, default to 300
    const speedData = el.getAttribute('data-swiper-speed');
    const speed = speedData ? parseInt(speedData) : 300;

    // Configure autoplay object
    let autoplayConfig = false;
    if (autoplayEnabled) {
      autoplayConfig = {
        delay: delay,
        pauseOnMouseEnter: true,
        disableOnInteraction: false,
      };
    }

    // Configure effect-specific settings
    let effectConfig = {};
    switch (effect) {
      case 'fade':
        effectConfig = {
          fadeEffect: {
            crossFade: true
          }
        };
        break;
      case 'cube':
        effectConfig = {
          cubeEffect: {
            shadow: true,
            slideShadows: true,
            shadowOffset: 20,
            shadowScale: 0.94,
          }
        };
        break;
      case 'coverflow':
        effectConfig = {
          coverflowEffect: {
            rotate: 50,
            stretch: 0,
            depth: 100,
            modifier: 1,
            slideShadows: true,
          }
        };
        break;
      case 'flip':
        effectConfig = {
          flipEffect: {
            slideShadows: true,
            limitRotation: true,
          }
        };
        break;
      case 'cards':
        effectConfig = {
          cardsEffect: {
            slideShadows: false,
          }
        };
        break;
      case 'creative':
        effectConfig = {
          creativeEffect: {
            prev: {
              translate: [0, 0, -400],
            },
            next: {
              translate: ['100%', 0, 0],
            },
          }
        };
        break;
    }

    new Swiper('.bs-swiper-columns-' + i, {
      slidesPerView: 1,
      spaceBetween: spaceBetween,
      loop: loop,
      grabCursor: true,
      autoplay: autoplayConfig,
      effect: effect,
      speed: speed, // Use the speed setting from data attribute
      ...effectConfig,
      pagination: {
        el: '.swiper-pagination',
        clickable: true,
      },
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      breakpoints: breakpoints
    });
  }
});